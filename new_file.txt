1.ORM：
  表与表之间的关系:
     1. 1对多

        user ---》 文章article

        department ---》 employee

        class Department(db.Model):
            __tablename__ ='depart'
             ....
            employees = db.relationship('Employee',backref='depart')


        class Employee(db.Model):
            ....

            depart_id = db.Column(db.Integer,db.ForeignKey('depart.id'),nullable=False)   ----> 多的一方

        正向:
            depart.employees   ---> list对象存放的是多名Employee对象
        反向:
            employee.depart   ---> depart对象

     2.多对多:

           user <--->goods
           student <---> course
           article <---> tag

           class Article(db.Model):
               id=xxxx
               ....
               tags = db.relationship('Tag',backref='articles',secondary='article_tag')


           class Tag(db.Model):
               id =xxx
               tname= ...


           class Article_Tag(db.Model):
               __tablename__ = 'article_tag'
               id=xxx
               aid=db.Column(db.Integer,db.ForeignKey('article.id'),nullable=False)
               tid =db.Column(db.Integer,db.ForeignKey('tag.id'),nullable=False)

           方式二:
           article_tag = db.Table('article_tag',
           db.Column('aid',db.Integer,db.ForeignKey('article.id'),primary_key=True),
           db.Column('tid',db.Integer,db.ForeignKey('tag.id'),primary_key=True)
           )


           1  3
           1  3

           添加
               article.tags.append(tag对象)
               或者
               tags.articles.append(article)

           删除:
              article.tags.remove(tags对象)


会话机制:
   http无状态

   Cookie ： 放在客户端
     存放: response.set_cookie(key,value,max_age,expires)
           response.delete_cookie(key)
     获取：
           request.cookies.get(key)

           {{ request.cookies['key'] }}

   Session: 放在服务器端
      from flask import session
      设置
      session[key] =value    ---> 默认开空间   sessionid    ---》 secret_key = ''
      底层利用cookie保存sessionid
      获取
      session.get('key')  ---->

      删除：
      cookie.clear()
------------------------------------------------------------------------------
 flask 钩子函数:
   第一次请求调用:
      @app.before_first_request    ---> app
      @article_bp.before_app_first_request   ----> Blueprint

   请求前:
      @app.before_request    ---> app
      @article_bp.before_app_request   ----> Blueprint

   执行完视图函数之后:
      @app.after_request    ---> app
      @article_bp.after_app_request   ----> Blueprint


处理错误页面的装饰器:
    @app.errorhandler(404)
    def handler_404(error):
        print(error)
        return render_template('404.html')
    蓝图
    @blog_bp.app_errorhandler(404)
    def handler_404(error):
        print(error)
        return render_template('404.html')


    @blog_bp.app_errorhandler(500)
    def handler_500(error):
        print(error) # error 表示的是error对象
        return render_template('500.html')

 装饰器:

分页：
   SQLAlchemy里面封装好的：Pagination类
      # 分页器对象
    paginate = Article.query.paginate(page=page, per_page=3)   ---》 paginate对象
    属性:
    print(paginate.pages)  # 一共多少页
    print(paginate.has_next)   # True
    print(paginate.has_prev)  # False

    print(paginate.next_num)  # 获取下一页的页码数
    print(paginate.prev_num)  # 获取上一页的页码数

    print(paginate.items)  # 获取当前页码的数据对象
    print(paginate.page)  当前页码数


————————————————————————————————————————
下午:

1.表单验证
   功能：
    集成 wtforms。
    带有 csrf 令牌的安全表单。
    全局的 csrf 保护。
    支持验证码（Recaptcha）。
    与 Flask-Uploads 一起支持文件上传。
    国际化集成。

 步骤：
   1. 定义表单类继承Form，并定义表单字段 StringField   PasswordFiled
     class RegisterForm(Form):
        username = StringField(validators=[Length(max=12, min=6, message='用户名长度必须在6~12位之间')])  # ----> < input type='text' >
        password = PasswordField(validators=[Length(max=12, min=6, message='用户名长度必须在6~12位之间')])
        repassword = PasswordField(
            validators=[Length(max=12, min=6, message='用户名长度必须在6~12位之间'), EqualTo('password', message='两次密码不一致')])
        phone = StringField(validators=Length(max=11, min=11, message='手机号码必须11位'))

  表单支持的类型:
      字段类型	      说明
    StringField	     文本字段
    TextAreaField	多行文本字段
    PasswordField	密码文本字段
    HiddenField	    隐藏文本字段
    DateField	    文本字段，值为datetime.date 格式
    DateTimeField	文本字段，值为datetime.datetime 格式
    IntegerField	文本字段，值为整数
    DecimalField	文本字段，值为decimal.Decimal
    FloatField	    文本字段，值为浮点数
    BooleanField	复选框，值为True 和False
    RadioField	    一组单选框
    SelectField	    下拉列表
    SelectMultipleField	下拉列表，可选择多个值
    FileField	    文件上传字段
    SubmitField	    表单提交按钮
    FormField	     把表单作为字段嵌入另一个表单
    FieldList	     一组指定类型的字段

    验证相关:
        WTForms验证函数如下表：
        Email	    验证电子邮件地址
        EqualTo	    比较两个字段的值；常用于要求输入两次密码进行确认的情况
        IPAddress	验证IPv4 网络地址
        Length	    验证输入字符串的长度
        NumberRange	验证输入的值在数字范围内
        Optional	无输入值时跳过其他验证函数
        Required	确保字段中有数据
        Regexp	    使用正则表达式验证输入值
        URL	         验证URL
        AnyOf	    确保输入值在可选值列表中
        NoneOf	    确保输入值不在可选值列表中

    2. 使用表单类：
       在视图函数中使用：
         1. 创建表单对象
         2. 将表单对象渲染到模板页面
         3. 在模板页面上使用: {{ rform.username}}   ---->  < input type='text' ...>
         4. 提交表单：
            post请求的时候：
            将post提交的数据封装到表单对象中
            rform = RegisterForm(request.form)
         5. 对象rform进行验证：
            rform.validator()   ----> 返回值True，False
            True： 验证通过
               6. 进行用户注册   ----》 密码加密：from werkzeug.security import generate_password_hash, check_password_hash
                   password = generate_password_hash(password)   ----> 数据库的字段长度要大
               7. 首页跳转
            False： 验证不通过
              6. 再次回到注册页面
              7. 在注册页面获取错误信息
                 {{ rform.errors }}  ------->字典结构

        {{ rform.errors }}  ---> 整个表单的错误  类型字典
        {{rform.username.errors }}  ----》 某个字段的error   类型元组


    二部分：
       Cross-site request forgery  CSRF   跨站请求伪造
         <!--<input type="hidden" name="csrf_token" value="{{csrf_token()}}">-->
      支持CSRF：
      1. 开启CSRF保护
         csrf = CsrfProtect()

        def create_app():
            ....

            csrf.init_app(app)

        配置文件中：
            SECRET_KEY = 'hdfjds38948938bmbfsd90008'   （session,CSRF保护）

      2. 如果表单没有添加csrf_token无法提交数据
         <input type="hidden" name="csrf_token" value="{{csrf_token()}}

      3. 表单才可以提交成功！



2. 文件上传  和  云存储 （七牛云存储）

   文件上传：


3. redis缓存

4. 补充： 用户加密  hashlib.sha1()
  ....
5. nginx 服务器

